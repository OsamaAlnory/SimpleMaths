######################################


startup.first.title:
Welcome to %name%!
<end>

startup.first.label:
%name% helps you understand programming and algorithms in a better way through
<nobr> the use of mathematics.
Many things become much easier to understand when visualized.
<nobr> For instance, knowing how to rotate a point in a 3 dimensional space
<nobr> allows you to create 3D objects and eventually 3D games.
Physics, when visualized, can explain many things that seem to be difficult to grasp.
<end>

golden_ratio.main:
Suppose you have a line that is divided into, let's say, a and b.
<nobr> In this case, it's pretty obvious that the length of the line is a+b.
<nobr> If the ratio between the longer piece and the line "a+b" is equal to
<nobr> the ratio between the shorter piece and the longer piece, we get what is known as
<nobr> The Golden Ratio which is approximated to be 1.6180339.
<end>

golden_ratio.2:
There's actually a simple formula for calculating the value of the golden ratio:
<end>
golden_ratio.3:
As it appears, the formula is recursive meaning that as you perform more calculation,
<nobr> you get closer and closer to the real value but you won't reach it since it's irrational.

Below is a simple algorithm written in C# language to calculate the value of the golden ratio:
<end>

golden_ratio.4:
Here, you can pass any positive value as "startValue". "precision" indicates how precise the value will be
<nobr> and is very important so that it won't be an infinite recursive loop.
When "precision" reaches 0 the loop will end and it will return the final value.
<end>

ifsats_main:
According to computerhope.com, "An if statement is a programming conditional statement that,
<nobr> if proved true, performs a function or displays information."
<end>

ifsats.1:
A simple example is shown below:
<end>

ifsats.2:

int x = 5;

if (x < 10) {
     Consol.WriteLine ("Hello There!");
}

Since x is defined and has the value 5 which is less than 10, the program will run the code
<nobr> inside the if statement. In other words, your output would be: Hello There!
<end>

ifsats.3:
The "else" keyword can be used to decide what the program will do if the statement is false.
<nobr> Note that the statement doesn't have to be an integer equals another integer.

string MyName = "Fredrick";

if (MyName == "John") { 
    Consol.WriteLine ("Your name is John!");
}
else { 
    Consol.WriteLine ("Your name is not John!");
}

Your output in this case would be: Your name is not John!
<end>

ifsats.4:
There are some advanced ways of using if statements like:

Console.WriteLine("You are " + (YourName == "John" ? : "Not" : "") + " John!");
  
Here, what is inside the parentheses is some kind of if statement which, if true, will give
<nobr> the value John and otherwise it will just give a blank string. This is a very useful way
<nobr> if you don't want to have a bunch of brackets and if statements in your code.
<end>

ifsats.5:


if (X == 10) { 
  Consol.WriteLine ("The value of X equals 10");
}
else { 
  Consol.WriteLine ("Value of X is not equal to 10");
}
<end>

######################################